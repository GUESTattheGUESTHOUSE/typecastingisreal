use {
    once_cell::sync::Lazy,
    regex::RegexSet,
};

let set = RegexSet::new(&[
    r"[(struct)]",
    r"[(union)]",
    r"[(const)]",
    r"[(let)]",
    r"[(pub)]",
    r"[(dyn)]",
    r"[(ref)]",
    r"[(raw)]",
    r"[(trait)]",
    r"[(fn)]",
    r"[('static)]",
    r"[(impl)]",
    r"[(for)]",
    r"[(self)]",
    r"[(async)]",
    r"[(move)]",
    r"[(Fn)]",
    r"[(AsyncFn)]",
    r"[(return)]",
    r"[(true)]",
    r"[(unsafe)]",
    r"[(extern)]",
    r"[(while)]",
    r"[(loop)]",
    r"[(in)]",
    r"[(if)]",
    r"[(else)]",
    r"[('label)]",
    r"[(loop)]",
    r"[(break)]",
    r"[(continue)]",
    r"[(await)]",
    r"[(as)]",
    r"[(mod)]",
    r"[(crate)]",
    r"[(super)]",
    r"[(self)]",
    r"[(use)]",
    r"[(type)]",
    r"[(Self)]",
    r"[(Box)]",
    r"[(alloc)]",
    r"[(any)]",
    r"[(any)]",
    r"[(ascii)]",
    r"[(async_inter)]",
    r"[(backtrace)]",
    r"[(boxed)]",
    r"[(bstr)]",
    r"[(cell)]",
    r"[(char)]",
    r"[(cmp)]",
    r"[(collections)]",
    r"[(env)]",
    r"[(error)]",
    r"[(ffi)]",
    r"[(fmt)]",
    r"[(fs)]",
    r"[(future)]",
    r"[(intrinsics)]",
    r"[(io)]",
    r"[(iter)]",
    r"[(marker)]",
    r"[(mem)]",
    r"[(net)]",
    r"[(ops)]",
    r"[(option)]",
    r"[(os)]",
    r"[(panic)]",
    r"[(path)]",
    r"[(pin)]",
    r"[(process)]",
    r"[(ptr)]",
    r"[(random)]",
    r"[(range)]",
    r"[(rc)]",
    r"[(result)]",
    r"[(simd)]",
    r"[(slice)]",
    r"[(str)]",
    r"[(string)]",
    r"[(sync)]",
    r"[(task)]",
    r"[(thread)]",
    r"[(time)]",
    r"[(vec)]",
    r"[(borrow)]",
    r"[(convert)]",
    r"[(fmt)]",
    r"[(intrinsics)]",
    r"[(option)]",
    r"[(result)]",
    r"[(array)]",
    r"[(bool)]",
    r"[(char)]",
    r"[(f128)]",
    r"[(f16)]",
    r"[(f32)]",
    r"[(f64)]",
    r"[(i64)]",
    r"[(i16)]",
    r"[(i8)]",
    r"[(i32)]",
    r"[(i64)]",
    r"[(i128)]",
    r"[(isize)]",
    r"[(never)]",
    r"[(pointer)]",
    r"[(reference)]",
    r"[(slice)]",
    r"[(tuple)]",
    r"[(u128)]",
    r"[(u16)]",
    r"[(u32)]",
    r"[(u8)]",
    r"[(u64)]",
    r"[(unit)]",
    r"[(usize)]",
    r"[(clone)]",
    r"[(default)]",
    r"[(future)]",
    r"[(hash)]",
    r"[(arch)]",
    r"[(assert)]",
    r"[(assert_eq)]",
    r"[(assert_matches)]",
    r"[(cfg)]",
    r"[(cfg_match)]",
    r"[(column)]",
    r"[(compile_error)]",
    r"[(concat)]",
    r"[(concat_bytes)]",
    r"[(concat_idents)]",
    r"[(const_format_args)]",
    r"[(dbg)]",
    r"[(debug_assert)]",
    r"[(debug_assert_eq)]",
    r"[(debug_assert_ne)]",
    r"[(eprint)]",
    r"[(eprintln)]",
    r"[(file)]",
    r"[(format)]",
    r"[(format_args)]",
    r"[(format_args_nl)]",
    r"[(include)]",
    r"[(is_x86_feature_detected)]",
    r"[(line)]",
    r"[(log_syntax)]",
    r"[(matches)]",
    r"[(module_path)]",
    r"[(option_env)]",
    r"[(pat)]",
    r"[(pin)]",
    r"[(prelude)]",
    r"[(print)]",
    r"[(println)]",
    r"[(stringify)]",
    r"[(thread_local)]",
    r"[(todo)]",
    r"[(trace_macros)]",
    r"[(try)]",
    r"[(unimplemented)]",
    r"[(unreachable)]",
    r"[(unsafe_binder)]",
    r"[(write)]",
    r"[(writeln)]",
    r"[(autodiff)]",
    r"[(hint)]",
    r"[(intrinsics)]",
    r"[(random)]",
    r"[(MAX)]",
    r"[(MIN)]",
    r"[(UNIX_EPOCH)]",
    r"[(ONCE_INIT)]",
    r"[(ATOMIC_BOOL_INIT)]",
    r"[(ATOMIC_ISIZE_INIT)]",
    r"[(ATOMIC_USIZE_INIT)]",
    r"[(MAIN_SEPARATOR)]",
    r"[(MAIN_SEPARATOR_STR)]",
    r"[(TAU)]",
    r"[(SQRT_2)]",
    r"[(SQRT_3)]",
    r"[(PI)]",
    r"[(PHI)]",
    r"[(LOG2_E)]",
    r"[(LOG2_10)]",
    r"[(LOG10_E)]",
    r"[(LOG10_2)]",
    r"[(LN_2)]",
    r"[(LN_10)]",
    r"[(FRAC_PI_2)]",
    r"[(FRAC_PI_3)]",
    r"[(FRAC_PI_4)]",
    r"[(FRAC_PI_6)]",
    r"[(FRAC_PI_8)]",
    r"[(FRAC_2_PI)]",
    r"[(FRAC_2_SQRT_PI)]",
    r"[(FRAC_1_PI)]",
    r"[(FRAC_1_SQRT_2)]",
    r"[(FRAC_1_SQRT_2PI)]",
    r"[(FRAC_1_SQRT_3)]",
    r"[(FRAC_1_SQRT_PI)]",
    r"[(EGAMMA)]",
    r"[(E)]",
    r"[(RADIX)]",
    r"[(NEG_INFINITY)]",
    r"[(NAN)]",
    r"[(MIN_POSITIVE)]",
    r"[(MIN_EXP)]",
    r"[(MIN_10_EXP)]",
    r"[(MAX)]",
    r"[(MIN)]",
    r"[(MAX_10_EXP)]",
    r"[(MAX_EXP)]",
    r"[(MANTISSA_DIGITS)]",
    r"[(INFINITY)]",
    r"[(EPSILON)]",
    r"[(DIGITS)]",
    r"[(consts)]",
    r"[(REPLACEMENT_CHARATER)]",
    r"[(UNICODE_VERSION)]",
    r"[(ARCH)]",
    r"[(DLL_EXTENSION)]",
    r"[(DLL_PREFIX)]",
    r"[(DLL_SUFFIX)]",
    r"[(EXE_EXTENSION)]",
    r"[(EXE_SUFFIX)]",
    r"[(FAMILY)]",
    r"[(OS)]",
    r"[(Result)]",
    r"[(poison)]",
    r"[(TryLockResult)]",
    r"[(LockResult)]",
    r"[(ParseError)]",
    r"[(usizex8)]",
    r"[(usizex1)]",
    r"[(usizex2)]",
    r"[(usizex16)]",
    r"[(usizex32)]",
    r"[(usizex4)]",
    r"[(usizex64)]",
    r"[(usizex8)]",
    r"[(u8x8)]",
    r"[(u8x1)]",
    r"[(u8x2)]",
    r"[(u8x4)]",
    r"[(u8x8)]",
    r"[(u8x16)]",
    r"[(u8x32)]",
    r"[(u8x64)]",
    r"[(u64x1)]",
    r"[(u64x2)]",
    r"[(u64x4)]",
    r"[(u64x8)]",
    r"[(u64x16)]",
    r"[(u64x32)]",
    r"[(u64x64)]",
    r"[(u32x1)]",
    r"[(u32x2)]",
    r"[(u32x4)]",
    r"[(u32x8)]",
    r"[(u32x16)]",
    r"[(u32x32)]",
    r"[(u32x64)]",
    r"[(u16x1)]",
    r"[(u16x2)]",
    r"[(u16x4)]",
    r"[(u16x8)]",
    r"[(u16x16)]",
    r"[(u16x32)]",
    r"[(u16x64)]",
    r"[(masksizex1)]",
    r"[(masksizex2)]",
    r"[(masksizex4)]",
    r"[(masksizex8)]",
    r"[(masksizex16)]",
    r"[(masksizex32)]",
    r"[(masksizex64)]",
    r"[(mask8x1)]",
    r"[(mask8x2)]",
    r"[(mask8x4)]",
    r"[(mask8x8)]",
    r"[(mask8x16)]",
    r"[(mask8x32)]",
    r"[(mask8x64)]",
    r"[(mask16x64)]",
    r"[(mask16x32)]",
    r"[(mask16x16)]",
    r"[(mask16x8)]",
    r"[(mask16x4)]",
    r"[(mask16x2)]",
    r"[(mask16x1)]",
    r"[(mask32x64)]",
    r"[(mask32x32)]",
    r"[(mask32x16)]",
    r"[(mask32x8)]",
    r"[(mask32x4)]",
    r"[(mask32x2)]",
    r"[(mask32x1)]",
    r"[(mask64x64)]",
    r"[(mask64x32)]",
    r"[(mask64x16)]",
    r"[(mask64x8)]",
    r"[(mask64x4)]",
    r"[(mask64x2)]",
    r"[(mask64x1)]",
    r"[(isizex1)]",
    r"[(isizex2)]",
    r"[(isizex4)]",
    r"[(isizex8)]",
    r"[(isizex16)]",
    r"[(isizex32)]",
    r"[(isizex64)]",
    r"[(i8x1)]",
    r"[(i8x2)]",
    r"[(i8x4)]",
    r"[(i8x8)]",
    r"[(i8x16)]",
    r"[(i8x32)]",
    r"[(i8x64)]",
    r"[(i16x1)]",
    r"[(i16x2)]",
    r"[(i16x4)]",
    r"[(i16x8)]",
    r"[(i16x16)]",
    r"[(i16x32)]",
    r"[(i16x64)]",
    r"[(i32x1)]",
    r"[(i32x2)]",
    r"[(i32x4)]",
    r"[(i32x8)]",
    r"[(i32x16)]",
    r"[(i32x32)]",
    r"[(i32x64)]",
    r"[(i64x1)]",
    r"[(i64x2)]",
    r"[(i64x4)]",
    r"[(i64x8)]",
    r"[(i64x16)]",
    r"[(i64x32)]",
    r"[(i64x64)]",
    r"[(f32x1)]",
    r"[(f32x2)]",
    r"[(f32x4)]",
    r"[(f32x8)]",
    r"[(f32x16)]",
    r"[(f32x32)]",
    r"[(f32x64)]",
    r"[(f64x1)]",
    r"[(f64x2)]",
    r"[(f64x4)]",
    r"[(f64x8)]",
    r"[(f64x16)]",
    r"[(f64x32)]",
    r"[(f64x64)]",
    r"[(PanicInfo)]",
    r"[(windows)]",
    r"[(HANDLE)]",
    r"[(SOCKET)]",
    r"[(RawHandle)]",
    r"[(RawSocket)]",
    r"[(RawPthread)]",
    r"[(unix)]",
    r"[(blkcnt_t)]",
    r"[(blksize_t)]",
    r"[(dev_t)]",
    r"[(gid_t)]",
    r"[(ino_t)]",
    r"[(mode_t)]",
    r"[(nlink_t)]",
    r"[(off_t)]",
    r"[(pid_t)]",
    r"[(pthread_t)]",
    r"[(time_t)]",
    r"[(uid_t)]",
    r"[(c_char)]",
    r"[(c_double)]",
    r"[(c_float)]",
    r"[(c_int)]",
    r"[(c_long)]",
    r"[(c_longlong)]",
    r"[(c_schar)]",
    r"[(c_short)]",
    r"[(c_uchar)]",
    r"[(c_uint)]",
    r"[(c_ulong)]",
    r"[(c_ulonglong)]",
    r"[(c_ushort)]",
    r"[(c_void)]",
    r"[(fd)]",
    r"[(RawFd)]",
    r"[(NonZeroU128)]",
    r"[(NonZeroU64)]",
    r"[(NonZeroU32)]",
    r"[(NonZeroU16)]",
    r"[(NonZeroU8)]",
    r"[(NonZeroUsize)]",
    r"[(NonZeroI128)]",
    r"[(NonZeroI64)]",
    r"[(NonZeroI32)]",
    r"[(NonZeroI16)]",
    r"[(NonZeroI8)]",
    r"[(NonZeroIsize)]",
    r"[(RawOsError)]",
    r"[(LayoutErr)]",
    r"[(yeild_now)]",
    r"[(spawn)]",
    r"[(sleep_until)]",
    r"[(sleep_ms)]",
    r"[(sleep)]",
    r"[(scope)]",
    r"[(park_timeout_ms)]",
    r"[(park_timeout)]",
    r"[(park)]",
    r"[(panicking)]",
    r"[(current)]",
    r"[(available_parallelism)]",
    r"[(add_spawn_hook)]",
    r"[(mpsc)]",
    r"[(mpmc)]",
    r"[(sync_channel)]",
    r"[(channel)]",
    r"[(atomic)]",
    r"[(fence)]",
    r"[(spin_loop_hint)]",
    r"[(compiler_fence)]",
    r"[(from_uft8)]",
    r"[(from_uft8_mut)]",
    r"[(from_uft8_unchecked)]",
    r"[(from_uft8_unchecked_mut)]",
    r"[(from_raw_parts)]",
    r"[(from_raw_parts_mut)]",
    r"[(from_boxed_utf8_unchecked)]",
    r"[(try_range)]",
    r"[(from_mut)]",
    r"[(from_mut_ptr_range)]",
    r"[(from_ptr_range)]",
    r"[(from_raw_parts)]",
    r"[(from_raw_parts_mut)]",
    r"[(from_ref)]",
    r"[(write_volatile)]",
    r"[(write_unaligned)]",
    r"[(write_bytes)]",
    r"[(write)]",
    r"[(without_provenance_mut)]",
    r"[(without_provenance)]",
    r"[(with_exposed_provenance)]",
    r"[(with_exposed_provenance_mut)]",
    r"[(swap)]",
    r"[(swap_nooverlapping)]",
    r"[(slice_from_raw_parts)]",
    r"[(slice_from_raw_parts_mut)]",
    r"[(replace)]",
    r"[(read_volatile)]",
    r"[(read_unaligned)]",
    r"[(read)]",
    r"[(null)]",
    r"[(null_mut)]",
    r"[(metadata)]",
    r"[(from_ref)]",
    r"[(from_mut)]",
    r"[(fn_addr_eq)]",
    r"[(eq)]",
    r"[(drop_in_place)]",
    r"[(dangling_mut)]",
    r"[(dangling)]",
    r"[(copy_nonoverlapping)]",
    r"[(copy)]",
    r"[(addr_eq)]",
    r"[(id)]",
    r"[(exit)]",
    r"[(abort)]",
    r"[(is_separator)]",
    r"[(absolute)]",
    r"[(update_hook)]",
    r"[(take_hook)]",
    r"[(set_hook)]",
    r"[(set_backgrace_style)]",
    r"[(resume_unwind)]",
    r"[(panic_any)]",
    r"[(get_backtrace_style)]",
    r"[(catch_unwind)]",
    r"[(always_abort)]",
    r"[(abort_unwind)]",
    r"[(chown)]",
    r"[(chroot)]",
    r"[(fchown)]",
    r"[(lchown)]",
    r"[(symlink)]",
    r"[(parent_id)]",
    r"[(link)]",
    r"[(rename)]",
    r"[(symlink)]",
    r"[(symlink_path)]",
    r"[(junction_point)]",
    r"[(symlink_dir)]",
    r"[(symlink_file)]",
    r"[(zeroed)]",
    r"[(variant_count)]",
    r"[(uninitialized)]",
    r"[(transmute)]",
    r"[(transmute_copy)]",
    r"[(take)]",
    r"[(size_of_val_raw)]",
    r"[(size_of_val)]",
    r"[(size_of)]",
    r"[(replace)]",
    r"[(needs_drop)]",
    r"[(min_align_of)]",
    r"[(min_align_of_val)]",
    r"[(forget_unsized)]",
    r"[(forget)]",
    r"[(drop)]",
    r"[(driscriminant)]",
    r"[(align_of)]",
    r"[(align_of_val)]",
    r"[(align_of_val_raw)]",
    r"[(variance)]",
    r"[(zip)]",
    r"[(successors)]",
    r"[(repeat)]",
    r"[(repeat_n)]",
    r"[(repeat_with)]",
    r"[(once)]",
    r"[(once_with)]",
    r"[(from_fn)]",
    r"[(from_coroutine)]",
    r"[(empty)]",
    r"[(chain)]",
    r"[(stdout)]",
    r"[(stdin)]",
    r"[(stderr)]",
    r"[(sink)]",
    r"[(repeat)]",
    r"[(read_to_string)]",
    r"[(pipe)]",
    r"[(write_via_move)]",
    r"[(write_bytes)]",
    r"[(wrapping_sub)]",
    r"[(wrapping_add)]",
    r"[(wrapping_mul)]",
    r"[(vtable_size)]",
    r"[(vtable_align)]",
    r"[(volatile_store)]",
    r"[(volatile_set_memory)]",
    r"[(volatile_load)]",
    r"[(volatile_copy_nonoverlapping)]",
    r"[(volatile_copy_memory)]",
    r"[(variant_count)]",
    r"[(unreachable)]",
    r"[(unlikely)]",
    r"[(unchecked_sub)]",
    r"[(unchecked_add)]",
    r"[(unchecked_div)]",
    r"[(unchecked_mul)]",
    r"[(unchecked_rem]",
    r"[(unchecked_shl)]",
    r"[(unchecked_shr)]",
    r"[(unaligned_volatile_store)]",
    r"[(unaligned_volatile_load)]",
    r"[(ub_checks)]",
    r"[(typed_swap_nonoverlapping)]",
    r"[(type_name)]",
    r"[(type_id)]",
    r"[(truncf64)]",
    r"[(truncf32)]",
    r"[(truncf16)]",
    r"[(truncf128)]",
    r"[(transmute_uncheck)]",
    r"[(transmute)]",
    r"[(three_way_compare)]",
    r"[(sub_with_overflow)]",
    r"[(sqrtf64)]",
    r"[(sqrtf32)]",
    r"[(sqrtf16)]",
    r"[(sqrtf128)]",
    r"[(sinf64)]",
    r"[(sinf32)]",
    r"[(sinf16)]",
    r"[(sinf128)]",
    r"[(simd_cast)]",
    r"[(simd_cast_ptr)]",
    r"[(simd_ceil)]",
    r"[(simd_ctlz)]",
    r"[(simd_ctpop)]",
    r"[(simd_cttz)]",
    r"[(simd_div)]",
    r"[(simd_eq)]",
    r"[(simd_expose_provenance)]",
    r"[(simd_extract)]",
    r"[(simd_fabs)]",
    r"[(simd_fcos)]",
    r"[(simd_fexp)]",
    r"[(simd_fexp2)]",
    r"[(simd_flog)]",
    r"[(simd_flog10)]",
    r"[(simd_flog2)]",
    r"[(simd_floor)]",
    r"[(simd_fma)]",
    r"[(simd_fmax)]",
    r"[(simd_fmin)]",
    r"[(simd_fsin)]",
    r"[(simd_fsqrt)]",
    r"[(simd_gather)]",
    r"[(simd_ge)]",
    r"[(simd_gt)]",
    r"[(simd_insert)]",
    r"[(simd_le)]",
    r"[(simd_lt)]",
    r"[(simd_masked_load)]",
    r"[(simd_masked_store)]",
    r"[(simd_mul)]",
    r"[(simd_ne)]",
    r"[(simd_neg)]",
    r"[(simd_or)]",
    r"[(simd_reduce_add_ordered)]",
    r"[(simd_reduce_add_unordered)]",
    r"[(simd_reduce_all)]",
    r"[(simd_reduce_and)]",
    r"[(simd_reduce_any)]",
    r"[(simd_reduce_max)]",
    r"[(simd_reduce_min)]",
    r"[(simd_reduce_mul_ordered)]",
    r"[(simd_reduce_mul_unordered)]",
    r"[(simd_reduce_or)]",
    r"[(simd_reduce_xor)]",
    r"[(simd_relaxed_fma)]",
    r"[(simd_rem)]",
    r"[(simd_round)]",
    r"[(simd_saturating_add)]",
    r"[(simd_saturating_sub)]",
    r"[(simd_scatter)]",
    r"[(simd_select)]",
    r"[(simd_select_bitmask)]",
    r"[(simd_shl)]",
    r"[(simd_shr)]",
    r"[(simd_shuffle)]",
    r"[(simd_sub)]",
    r"[(simd_trunc)]",
    r"[(simd_with_exposed_provenance)]",
    r"[(simd_xor)]",
    r"[(select_unpredictable)]",
    r"[(saturating_add)]",
    r"[(saturating_sub)]",
    r"[(rustc_peek)]",
    r"[(roundf64)]",
    r"[(roundf32)]",
    r"[(roundf16)]",
    r"[(roundf128)]",
    r"[(rotate_right)]",
    r"[(rotate_left)]",
    r"[(rintf64)]",
    r"[(rintf32)]",
    r"[(rintf16)]",
    r"[(rintf128)]",
    r"[(read_via_copy)]",
    r"[(raw_eq)]",
    r"[(ptr_offset_from_unsigned)]",
    r"[(ptr_offset_from)]",
    r"[(ptr_metadata)]",
    r"[(ptr_mask)]",
    r"[(ptr_guaranteed_cmp)]",
    r"[(prefetch_write_instuction)]",
    r"[(prefetch_write_data)]",
    r"[(prefetch_read_instuction)]",
    r"[(prefetch_read_data)]",
    r"[(pref_align_of)]",
    r"[(powif64)]",
    r"[(powif32)]",
    r"[(powif16)]",
    r"[(powif128)]",
    r"[(powf64)]",
    r"[(powf64)]",
    r"[(powf32)]",
    r"[(powf16)]",
    r"[(powf128)]",
    r"[(offset)]",
    r"[(nontemporal_store)]",
    r"[(needs_drop)]",
    r"[(nearbyintf64)]",
    r"[(nearbyintf32)]",
    r"[(nearbyintf16)]",
    r"[(nearbyintf128)]",
    r"[(mul_with_overflow)]",
    r"[(mir)]",
    r"[(Variant)]",
    r"[(UnwindUnreachable)]",
    r"[(UnwindTerminate)]",
    r"[(UnwindResume)]",
    r"[(UnwindContinue)]",
    r"[(UnwindCleanup)]",
    r"[(Unreachable)]",
    r"[(TailCall)]",
    r"[(StorageLive)]",
    r"[(StorageDead)]",
    r"[(StaticMut)]",
    r"[(Static)]",
    r"[(SetDiscriminant)]",
    r"[(ReturnTo)]",
    r"[(Return)]",
    r"[(Retag)]",
    r"[(PtrMetadata)]",
    r"[(Offset)]",
    r"[(Move)]",
    r"[(Len)]",
    r"[(Goto)]",
    r"[(Field)]",
    r"[(Drop)]",
    r"[(Discriminant)]",
    r"[(Deinit)]",
    r"[(CopyforDeref)]",
    r"[(Checked)]",
    r"[(CastTransmute)]",
    r"[(CastPtrToPtr)]",
    r"[(Call)]",
    r"[(Assume)]",
    r"[(minnumf64)]",
    r"[(minnumf32)]",
    r"[(minnumf16)]",
    r"[(minnumf128)]",
    r"[(min_align_of_val)]",
    r"[(min_align_of)]",
    r"[(maxnumf64)]",
    r"[(maxnumf32)]",
    r"[(maxnumf16)]",
    r"[(maxnumf128)]",
    r"[(logf128)]",
    r"[(logf64)]",
    r"[(logf32)]",
    r"[(logf16)]",
    r"[(log2f128)]",
    r"[(log2f64)]",
    r"[(log2f32)]",
    r"[(log10f128)]",
    r"[(log10f64)]",
    r"[(log10f32)]",
    r"[(log10f16)]",
    r"[(likely)]",
    r"[(is_val_statically_known)]",
    r"[(fsub_fast)]",
    r"[(fsub_algebraic)]",
    r"[(frem_fast)]",
    r"[(frem_algebraic)]",
    r"[(forget)]",
    r"[(fmuladd128)]",
    r"[(fmuladd64)]",
    r"[(fmuladd32)]",
    r"[(fmuladd16)]",
    r"[(fmul_fast)]",
    r"[(fmul_algebraic)]",
    r"[(fmaf128)]",
    r"[(fmaf64)]",
    r"[(fmaf32)]",
    r"[(fmaf16)]",
    r"[(floor128)]",
    r"[(floor64)]",
    r"[(floor32)]",
    r"[(floor16)]",
    r"[(float_to_int_unchecked)]",
    r"[(fdiv_fast)]",
    r"[(fdiv_algebraic)]",
    r"[(fadd_fast)]",
    r"[(fadd_algebraic)]",
    r"[(fabsf128)]",
    r"[(fabsf64)]",
    r"[(fabsf32)]",
    r"[(fabsf16)]",
    r"[(expf128)]",
    r"[(expf64)]",
    r"[(expf32)]",
    r"[(expf16)]",
    r"[(exp2f128)]",
    r"[(exp2f64)]",
    r"[(exp2f32)]",
    r"[(exp2f16)]",
    r"[(exact_div)]",
    r"[(drop_in_place)]",
    r"[(disjoint_bitor)]",
    r"[(discriminant_value)]",
    r"[(cttz)]",
    r"[(cttz_nonzero)]",
    r"[(ctpop)]",
    r"[(ctlz)]",
    r"[(ctlz_nonzero)]",
    r"[(cosf128)]",
    r"[(cosf64)]",
    r"[(cosf32)]",
    r"[(cosf16)]",
    r"[(copysignf128)]",
    r"[(copysignf64)]",
    r"[(copysignf32)]",
    r"[(copysignf16)]",
    r"[(copysignf16)]",
    r"[(copy_nonoverlapping)]",
    r"[(contract_checks)]",
    r"[(contract_check_requires)]",
    r"[(contract_check_ensures)]",
    r"[(const_eval_select)]",
    r"[(const_deallocate)]",
    r"[(const_allocate)]",
    r"[(compare_bytes)]",
    r"[(cold_path)]",
    r"[(ceilf128)]",
    r"[(ceilf64)]",
    r"[(ceilf32)]",
    r"[(ceilf16)]",
    r"[(catch_unwind)]",
    r"[(carrying_mul_add)]",
    r"[(caller_location)]",
    r"[(bswap)]",
    r"[(breakpoint)]",
    r"[(black_box)]",
    r"[(bitreverse)]",
    r"[(atomic_xsub_seqcst)]",
    r"[(atomic_xsub_release)]",
    r"[(atomic_xsub_relaxed)]",
    r"[(atomic_xsub_acquire)]",
    r"[(atomic_xsub_acqrel)]",
    r"[(atomic_xor_seqcst)]",
    r"[(atomic_xor_release)]",
    r"[(atomic_xor_relaxed)]",
    r"[(atomic_xor_acquire)]",
    r"[(atomic_xor_acqrel)]",
    r"[(atomic_xchg_seqcst)]",
    r"[(atomic_xchg_release)]",
    r"[(atomic_xchg_relaxed)]",
    r"[(atomic_xchg_aquire)]",
    r"[(atomic_xchg_acqrel)]",
    r"[(atomic_xadd_seqcst)]",
    r"[(atomic_xadd_release)]",
    r"[(atomic_xadd_relaxed)]",
    r"[(atomic_xadd_aquire)]",
    r"[(atomic_xadd_acqrel)]",
    r"[(atomic_umin_seqcst)]",
    r"[(atomic_umin_release)]",
    r"[(atomic_umin_relaxed)]",
    r"[(atomic_umin_aquire)]",
    r"[(atomic_umin_acqrel)]",
    r"[(atomic_umax_seqcst)]",
    r"[(atomic_umax_release)]",
    r"[(atomic_umax_relaxed)]",
    r"[(atomic_umax_aquire)]",
    r"[(atomic_umax_acqrel)]",   
    r"[(atomic_store_unordered)]",   
    r"[(atomic_store_seqcst)]",   
    r"[(atomic_store_release)]",   
    r"[(atomic_singlethreadfence_acqrel)]",   
    r"[(atomic_singlethreadfence_acquire)]",   
    r"[(atomic_singlethreadfence_release)]",   
    r"[(atomic_singlethreadfence_seqcst)]",   
    r"[(atomic_or_acqrel)]",
    r"[(atomic_or_acquire)]",
    r"[(atomic_or_relaxed)]",
    r"[(atomic_or_release)]",
    r"[(atomic_or_seqcst)]",
    r"[(atomic_nand_acqrel)]",
    r"[(atomic_nand_acquire)]",
    r"[(atomic_nand_relaxed)]",
    r"[(atomic_nand_release)]",
    r"[(atomic_nand_seqcst)]",
    r"[(atomic_min_acqrel)]",
    r"[(atomic_min_acquire)]",
    r"[(atomic_min_relaxed)]",
    r"[(atomic_min_release)]",
    r"[(atomic_min_seqcst)]",
    r"[(atomic_max_acqrel)]",
    r"[(atomic_max_acquire)]",
    r"[(atomic_max_relaxed)]",
    r"[(atomic_max_release)]",
    r"[(atomic_load_seqcst)]",
    r"[(atomic_load_acquire)]",
    r"[(atomic_load_unordered)]",
    r"[(atomic_load_seqcst)]",
    r"[(atomic_fence_secst)]",
    r"[(atomic_fence_acquire)]",
    r"[(atomic_fence_release)]",
    r"[(atomic_fence_acqrel)]",
    r"[(atomic_cxchgweak_seqcst_seqcst)]",
    r"[(atomic_cxchgweak_seqcst_relaxed)]",
    r"[(atomic_cxchgweak_seqcst_acquire)]",
    r"[(atomic_cxchgweak_release_seqcst)]",
    r"[(atomic_cxchgweak_release_relaxed)]",
    r"[(atomic_cxchgweak_release_acquire)]",
    r"[(atomic_cxchgweak_relaxed_seqcst)]",
    r"[(atomic_cxchgweak_relaxed_relaxed)]",
    r"[(atomic_cxchgweak_relaxed_acquire)]",
    r"[(atomic_cxchgweak_acquire_acquire)]",
    r"[(atomic_cxchgweak_acquire_relaxed)]",
    r"[(atomic_cxchgweak_acquire_seqcst)]",
    r"[(atomic_cxchgweak_acqrel_acquire)]",
    r"[(atomic_cxchgweak_acqrel_relaxed)]",
    r"[(atomic_cxchgweak_acqrel_seqcst)]",
    r"[(atomic_and_seqcst)]",
    r"[(atomic_and_relaxed)]",
    r"[(atomic_and_release)]",
    r"[(atomic_and_acqrel)]",
    r"[(atomic_and_acquire)]",
    r"[(assume)]",
    r"[(assert_zero_valid)]",
    r"[(assert_mem_uninitialized_valid)]",
    r"[(assert_inhabited)]",
    r"[(arith_offset)]",
    r"[(aggregate_raw_prt)]",
    r"[(add_with_overflow)]",
    r"[(abort)]",
    r"[(unreachable_unchecked)]",
    r"[(unlikely)]",
    r"[(spin_loop)]",
    r"[(must_use)]",
    r"[(cold_path)]",
    r"[(black_box)]",
    r"[(assert_unchecked)]",
    r"[(ready)]",
    r"[(poll_fn)]",
    r"[(pending)]",
    r"[(async_drop)]",
    r"[(async_drop_in_place)]",
    r"[(symlink_metadata)]",
    r"[(soft_link)]",
    r"[(set_permissions)]",
    r"[(rename)]",
    r"[(remove_file)]",
    r"[(remove_dir)]",
    r"[(remove_dir_all)]",
    r"[(read_to_string)]",
    r"[(read_link)]",
    r"[(read_dir)]",
    r"[(exists)]",
    r"[(hard_link)]",
    r"[(create_dir)]",
    r"[(create_dir_all)]",
    r"[(canonicalize)]",
    r"[(format)]",
    r"[(from_fn)]",
    r"[(request_ref)]",
    r"[(request_value)]",
    r"[(vars_os)]",
    r"[(vars)]",
    r"[(var_os)]",
    r"[(temp_dir)]",
    r"[(split_paths)]",
    r"[(set_var)]",
    r"[(set_current_dir)]",
    r"[(remove_var)]",
    r"[(join_paths)]",
    r"[(home_dir)]",
    r"[(current_exe)]",
    r"[(current_dir)]",
    r"[(args)]",
    r"[(args_os)]",
    r"[(identity)]",
    r"[(minmax_by)]",
    r"[(minmax_by_key)]",
    r"[(minmax)]",
    r"[(min_by_key)]",
    r"[(min_by)]",
    r"[(max_by)]",
    r"[(max_by_key)]",
    r"[(from_u32_unchecked)]",
    r"[(from_u32)]",
    r"[(decode_utf16)]",
    r"[(box_new)]",
    r"[(from_iter)]",
    r"[(escape_default)]",
    r"[(try_from_fn)]",
    r"[(repeat)]",
    r"[(from_ref)]",
    r"[(from_mut)]",
    r"[(from_fn)]",
    r"[(type_name)]",
    r"[(type_name_of_val)]",
    r"[(take_alloc_error_hook)]",
    r"[(set_alloc_error_hook)]",
    r"[(realloc)]",
    r"[(handle_alloc_error)]",
    r"[(dealloc)]",
    r"[(alloc_zeroed)]",
    r"[(Clone)]",
    r"[(Eq)]",
    r"[(Ord)]",
    r"[(PartialEq)]",
    r"[(PartialOrd)]",
    r"[(Default)]",
    r"[(Debug)]",
    r"[(Hash)]",
    r"[(CoercePointee)]",
    r"[(ConstParamTy)]",
    r"[(UnsizedConstParamTy)]",
    r"[(v1)]",
    r"[(alloc_error_handler)]",
    r"[(bench)]",
    r"[(cfg_accessible)]",
    r"[(cfg_eval)]",
    r"[(derive)]",
    r"[(derive_const)]",
    r"[(global_allocator)]",
    r"[(test)]",
    r"[(test_case)]",
    r"[(wrap_binder)]",
    r"[(unwrap_binder)]",
    r"[(simd_swizzle)]",
    r"[(addr_of)]",
    r"[(addr_of_mut)]",
    r"[(type_ascribe)]",
    r"[(deref)]",
    r"[(pin)]",
    r"[(pattern_type)]",
    r"[(offset_of)]",
    r"[(const_error)]",
    r"[(place)]",
    r"[(join)]",
    r"[(assert_matches)]",
    r"[(debug_assert_matches)]",
    r"[(is_aarch64_feature_detected)]",
    r"[(is_arm_feature_detected)]",
    r"[(is_loongarch_feature_detected)]",
    r"[(is_mips_feature_detected)]",
    r"[(is_mips64_feature_detected)]",
    r"[(is_powerpc64_feature_detected)]",
    r"[(is_powerpc_feature_detected)]",
    r"[(is_riscv_feature_detected)]",
    r"[(is_x86_feature_detected)]",
    r"[(Wake)]",
    r"[(LocalWake)]",
    r"[(ToString)]",
    r"[(pattern)]",
    r"[(Searcher)]",
    r"[(ReverseSearcher)]",
    r"[(Pattern)]",
    r"[(DoubleEndedSearcher)]",
    r"[(FromStr)]",
    r"[(SliceIndex)]",
    r"[(Join)]",
    r"[(Concat)]",
    r"[(SimdConstPrt)]",
    r"[(SimdMutPrt)]",
    r"[(SimdUint)]",
    r"[(SimdPartialOrd)]",
    r"[(SimdPartialEq)]",
    r"[(SimdOrd)]",
    r"[(SimdInt)]",
    r"[(SimdFloat)]",
    r"[(SupportedLaneCount)]",
    r"[(StdFloat)]",
    r"[(SimdElement)]",
    r"[(SimdCast)]",
    r"[(MaskElement)]",
    r"[(RangeBounds)]",
    r"[(OneSidedRange)]",
    r"[(IntoBounds)]",
    r"[(RandomSource)]",
    r"[(Pointee)]",
    r"[(Termination)]",
    r"[(PinCoerceUnsized)]",
    r"[(UnwindSafe)]",
    r"[(RefUnwindSafe)]",
    r"[(ExitStatusExt)]",
    r"[(ExitCodeExt)]",
    r"[(CommandExt)]",
    r"[(ChildExt)]",
    r"[(IntoRawSocket)]",
    r"[(IntoRawHandle)]",
    r"[(FromRawHandle)]",
    r"[(FromRawSocket)]",
    r"[(AsSocket)]",
    r"[(AsRawSocket)]",
    r"[(AsRawHandle)]",
    r"[(AsHandle)]",
    r"[(OpenOptionsExt)]",
    r"[(MetadataExt)]",
    r"[(FileTypeExt)]",
    r"[(FileTimesExt)]",
    r"[(FileExt)]",
    r"[(OsStringsExt)]",
    r"[(OsStrExt)]",
    r"[(OpenOptionsExt)]",
    r"[(DirEntryExt)]",
    r"[(JoinHandleExt)]",
    r"[(ExitStatuxExt)]",
    r"[(CommandExt)]",
    r"[(PermissionsExt)]",
    r"[(DirEntryExt)]",
    r"[(DirEntryExt2)]",
    r"[(DirBuilderExt)]",
    r"[(UnixSocketExt)]",
    r"[(TcpStreamExt)]",
    r"[(IntoRawFd)]",
    r"[(FromRawFd)]",
    r"[(AsFd)]",
    r"[(AsRawFd)]",
    r"[(Try)]",
    r"[(SubAssign)]",
    r"[(ShrAssign)]",
    r"[(ShlAssign)]",
    r"[(Residual)]",
    r"[(RemAssign)]",
    r"[(Rem)]",
    r"[(Reciever)]",
    r"[(RangeBounds)]",
    r"[(OneSidedRange)]",
    r"[(MulAssign)]",
    r"[(IndexMut)]",
    r"[(Index)]",
    r"[(IntoBounds)]",
    r"[(FromResidual)]",
    r"[(FnOnce)]",
    r"[(FnMut)]",
    r"[(Drop)]",
    r"[(DivAssign)]",
    r"[(Div)]",
    r"[(DispatchFromDyn)]",
    r"[(DerefPure)]",
    r"[(DerefMut)]",
    r"[(Deref)]",
    r"[(Coroutine)]",
    r"[(CoerceUnsized)]",
    r"[(BitXor)]",
    r"[(BitXorAssign)]",
    r"[(BitOr)]",
    r"[(BitOrAssign)]",
    r"[(BitAnd)]",
    r"[(BitAndAssign)]",
    r"[(AsyncFn)]",
    r"[(AsyncFnMut)]",
    r"[(AsyncFnOnce)]",
    r"[(AddAssign)]",
    r"[(num)]"])
    .unwrap();

let mut return_vec = Vec::new();

fn regexcounterpoc (&return_vec) -> &return_vec{
    static RE: Lazy<Regex> = Lazy::new(|| Regex::new(r"...").unwrap());
    &return_vec 
}
fn main() {
}
